HCanAWR.controllers.ExternalURLController = Ext.extend(Ext.Controller, {
    conf: {
        RECALLDETAILREGEX: /\/(\d+)[ra]-(eng|fra).php$/i
    },
    
    init: function(callback) {
        // Handle all OpenURL events.
        HCanAWR.mon(HCanAWR, 'OpenURL', this.navigateTo, this);
        HCanAWR.mon(HCanAWR, 'MailTo', this.mailTo, this);
        HCanAWR.mon(HCanAWR, 'ModifyExternalLinks', this.modifyExternalLinks, this);
        
        callback(null);
    },
    
    navigateTo: function(url, callback) {
        var doIdle = function() {
                HCanAWR.idle();
            };
        
        HCanAWR.confirm(
            getStr('externalURL_MessageTitle'),
            getStr('externalURL_MessageBody'),
            function(wantNav) {
                wantNav = (wantNav == 'yes');

                if (wantNav) {
                    HCanAWR.busy();
                    if (Ext.is.Blackberry) {
                        blackberry.invoke.invoke(
                            blackberry.invoke.APP_BROWSER,
                            new blackberry.invoke.BrowserArguments(url)
                        );
                        doIdle();
                    } else if (Ext.is.Android) {
                        window.plugins.HCanAWRPlugin.openURL(url, doIdle, doIdle);
                    } else if (Ext.is.iOS) {
                        window.location.href = url;
                        doIdle();
                    } else {
                        console.log('Navigating to: ' + url);
                        doIdle();
                    }
                }
                
                // Pass the decision to the callback function.
                callback(wantNav);
            }
        );
    },
    
    mailTo: function(subject, body) {
        if (Ext.is.Blackberry) {
            var msgargs = new blackberry.invoke.MessageArguments("", subject, body);
            msgargs.view = blackberry.invoke.MessageArguments.VIEW_NEW;
            blackberry.invoke.invoke(blackberry.invoke.APP_MESSAGES, msgargs);
        } else if (Ext.is.Android) {
            window.plugins.HCanAWRPlugin.sendMail(
                {
                    subject:subject,
                    body:body,
                },
                Ext.emptyFn,
                Ext.emptyFn
            );
        } else if (Ext.is.iOS) {
            window.location.href = 'sendMail://host/'+encodeURIComponent(subject)+'?q='+encodeURIComponent(body);
        }
    },
    
    modifyExternalLinks: function(cmp, callingView) {
        if (cmp === undefined) return;
        
        Ext.each(cmp.el.dom.getElementsByTagName('a'), function(anchor) {
            var __href = anchor.href; // copy
            
            if (__href == window.location) { // Avoid repeating.
                return true;
            }
            
            var recallDetailMatch = __href.match(this.conf.RECALLDETAILREGEX),
                onClickFn = function() {
                    HCanAWR.fireEvent('OpenURL', __href, Ext.emptyFn);
                    return false;
                };
            
            if (recallDetailMatch instanceof Array) {
                var matchedRecallId = recallDetailMatch[1];
                onClickFn = function() {
                    HCanAWR.fireEvent('ShowRecallDetail', { recallId: matchedRecallId, callingView: callingView }, Ext.emptyFn );
                    return false;
                };
            }
            
            anchor.onclick = onClickFn;
            anchor.href = window.location;
        }, this);
    },
    
    destroy: function() {
        return;
    }

});
