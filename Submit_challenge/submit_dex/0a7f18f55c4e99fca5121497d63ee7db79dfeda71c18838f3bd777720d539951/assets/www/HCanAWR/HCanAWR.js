Ext.regApplication({
	name: 'HCanAWR',

	// Fix Blackberry unable to open
	// external URLs in browser app
	useHistory: false,
	
	primaryControllers: [
		'ExternalURLController',
		'SplashScreenController',
	],
	secondaryControllers: [
		'TabController',
		'SettingsController',
		'RecallBrowserController',
		'RecallDetailController',
		'RecallImageController',
		'RecallSubmitController',
	],
	conf: {	SWIPEBUFFER: 50, USERINPUTBUFFER: 50,
			BUSYSCREENDELAY: 100, // ms
			RECALLREADKEY: 'recallRead',
			RECALLREADSIZE: Math.round(2.49*1024*1024,0), /* Chrome seems to be the lowest at 2.5MB */
			RECALLREADAGE: 30*86400*1000,
			ALLCATEGORIES: 'all',
			MULTIPLECATEGORIES: 'multiple',
			IMAGEPANELNAME: 'images',
	},
	itemCategories: ['food','vehicle','cps','health'],
	itemCategoryMap: {
		'food': 1,
		'vehicle': 2,
		'health': 3,
		'cps': 4,
		categoryNameFromId: function(id) {
			for (var i in this) {
				if (this.hasOwnProperty(i)) {
					if (this[i] == id) {
						return i;
					}
				}
			}
		},
		categoryIdFromName: function(name) {
			return (name.toLowerCase() in this) ? this[name.toLowerCase()] : 0;
		}
	},
	
	view: null,
	viewShown: null,
	lastViewShown: null,
	services: null,
	appSettings: null,
	controllerInstances: {},
	language: null,
	initDone: false,
	
	init: function() {
		var that = this,
			events = [
				// Events will also be added by the controllers themselves.
				'ShowView', // (viewName)
				'ShowLastView',
				'LanguageSelected',
				'OpenURL', // (url,callback(confirmed))
			],
			initAppSettingsModel = function() {
				if (localStorage['appsettings-counter'] === undefined) {
					createAppSettingsModelInstance(null);
				} else {
					Ext.ModelMgr.getModel('AppSettings').load(
						"1",
						{
							scope: this,
							success: function(record, operation) {
								createAppSettingsModelInstance(record.data);
							},
							failure: function(record, operation) {
								createAppSettingsModelInstance(null);
							},
							callback: Ext.emptyFn
						}
					);
				}
			},
			createAppSettingsModelInstance = function(data) {
				if (!data) {
					data = {};
				}
				
				for (var lsKey in localStorage) {
					if (lsKey.indexOf('appsettings') == 0) {
						delete(localStorage[lsKey]);
					}
				}
				
				that.appSettings = Ext.ModelMgr.create(data, 'AppSettings');
				that.appSettings.save();
				
				onAppSettingsModelReady();
			},
			onAppSettingsModelReady = function() {
				that.applyLanguage();
				
				if (!that.initDone) {
					createView();
					that.initDone = true;
				}
				
				that.fireEvent('ShowSplashScreenView');
				
				if (that.appSettings.get('languageSelected')) {
					that.fireEvent('LanguageSelected', that.appSettings.get('language'));
					that.idle();
				} else {
					chooseLanguage();
					that.idle();
				}
			},
			createView = function() {
				that.view = new Ext.Panel({
					id: 'topView',
					fullscreen: true,
					scroll: false,
					layout: 'card',
				});
				
				that.loadControllers('primary');
			},
			chooseLanguage = function() {
				that.fireEvent('ShowLanguageSelection');
			};
		
		if (!this.initDone) {
			this.addEvents(events);
			this.mon(this, 'ShowView', this.showView, this);
			this.mon(this, 'ShowLastView', this.showLastView, this);
			this.mon(this, 'LanguageSelected', this.onLanguageSelected, this);
			
			this.busyCount = 0;
			this.busyTimer = null;
			this.busyView = new HCanAWR.views.BusyScreenView();
			this.busy();
			
			initAppSettingsModel();
		} else {
			onAppSettingsModelReady();
		}
	},
	
	loadControllers: function(type) {
		var that = this;
		HCanAWR.busy();
		for (var ctlIndex = 0 ; ctlIndex < this[type+'Controllers'].length ; ctlIndex++) {
			var controllerName = this[type+'Controllers'][ctlIndex];
			this.controllerInstances[controllerName] = new HCanAWR.controllers[controllerName]();
			this.controllerInstances[controllerName].init(function(view) {
				if (view) {
					that.view.add(view);
				}
			});
		}
		
		this.view.doLayout();
		HCanAWR.idle();
	},
	
	shutdown: function() {
		this.busy();
		
		for (var ctlIndex = 0 ; ctlIndex < this.secondaryControllers.length ; ctlIndex++) {
			var controllerName = this.secondaryControllers[ctlIndex];
			this.controllerInstances[controllerName].destroy();
			delete( this.controllerInstances[controllerName] );
		}
		
		this.idle();
	},
	
	initServices: function(onSuccess, onFail) {
		if (this.services) {
			if (this.services.available) {
				onSuccess();
			} else {
				this.services.init(onSuccess, onFail);
			}
		} else {
			// Create a new service instance
			this.services = new HCanAWRServices();
			this.services.init(onSuccess, onFail);
		}
	},
	
	showView: function(viewName) {
		var viewInstance = this.controllerInstances[viewName+'Controller'].view;
		
		this.lastViewShown = this.viewShown;
		this.viewShown = viewName;
		
		this.view.setActiveItem( viewInstance );
		viewInstance.show();
	},
	
	showLastView: function() {
		this.fireEvent('ShowView', this.lastViewShown);
	},
	
	busy: function() {
		this.busyCount = (this.busyCount <= 0) ? 1 : this.busyCount+1;
		this.showBusyScreen();
		return this.busyCount;
	},
	
	idle: function() {
		this.busyCount = (this.busyCount <= 0) ? 0 : this.busyCount-1;
		this.hideBusyScreen();
		return this.busyCount;
	},
	
	showBusyScreen: function() {
		var that = this;
		
		if (this.busyCount > 0 && this.busyTimer == null) {
			this.busyTimer = setTimeout(
				function() {
					if (that.busyCount > 0) {
						that.busyView.setVisible(true);
					}
				},
				this.conf.BUSYSCREENDELAY
			);
		}
	},
	
	hideBusyScreen: function() {
		if (this.busyCount <= 0) {
			if (this.busyTimer) {
				clearTimeout(this.busyTimer);
				this.busyTimer = null;
			}
			this.busyView.setVisible(false);
		}
	},
	
	alert: function(title, msg, fn, scope) {
		Ext.Msg.alert(title, msg, fn, scope);
		Ext.Msg.doComponentLayout();
	},
	
	confirm: function(title, msg, fn, scope) {
		Ext.Msg.confirm(title, msg, fn, scope);
		Ext.Msg.doComponentLayout();
	},
	
	saveLanguage: function(lang) {
		this.appSettings.set('language', lang);
		this.appSettings.set('languageSelected', true);
		this.appSettings.save();
	},
	
	applyLanguage: function() {
		this.language = this.appSettings.get('language');
		window.STLanguage[this.language]();
	},
	
	onLanguageSelected: function(lang) {
		var that = this;
		this.busy();
		this.saveLanguage(lang);
		this.applyLanguage(lang);
		
		this.startApplication();
		this.idle();
	},
	
	startApplication: function() {
		var that = this;
		this.initServices(
			function() {
				that.loadControllers('secondary');
				that.fireEvent('ShowRecentRecallsView');
			},
			function() {
				HCanAWR.alert(getStr('app_Title'), getStr('services_failMessage'), function() {
					setTimeout(function() {
						that.startApplication(); // Keep trying.
					} , 0);
				});
			}
		);
	},
	
	restart: function(showMsg) {
		var that = this,
			restartFn = function() {
				that.shutdown();
				that.init();
			};
		
		if (showMsg) {
			HCanAWR.alert(
				getStr('app_Title'),
				getStr('restart_Message'),
				restartFn
			);
		} else {
			restartFn();
		}
	},
	
});

