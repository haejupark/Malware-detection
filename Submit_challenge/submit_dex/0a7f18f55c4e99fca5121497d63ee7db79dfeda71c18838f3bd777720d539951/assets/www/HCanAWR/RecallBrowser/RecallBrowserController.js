HCanAWR.controllers.RecallBrowserController = Ext.extend(Ext.Controller, {
	conf: {
		MINKEYWORDLENGTH: 2,
	},
	
	displayModes: {
		RECENT: 'Recent',
		SEARCH: 'Search',
	},
	
	init: function(callback) {
		var that = this;
		
		HCanAWR.mon(HCanAWR, 'ShowRecentRecallsView', this.showRecentRecalls, this);
		HCanAWR.mon(HCanAWR, 'ShowSearchRecallsView', this.showSearchRecalls, this);
		HCanAWR.mon(HCanAWR, 'ShowRecallDetail', this.onShowRecallDetail, this);
		HCanAWR.mon(HCanAWR, 'DoSearchWithText', this.doSearchWithText, this);
		
		this.store = new Ext.data.Store({
			model: 'RecallListItem'
		});
		
		this.results_count = 0;
		this.userEnteredSearch = false;
		this.androidSearchDone = false;
		this.displayMode = this.displayModes.RECENT;
		
		this.initRecallReadData();
		
		this.searchData = {
			category: '0',
			keywords: '',
			lim: HCanAWR.services.services.search.constants.lim,
			off: 0,
			lang: HCanAWR.language
		};
		
		this.listResultsSuccessCallback = function(data) {
			if (data.error) {
				HCanAWR.alert(getStr('app_Title'), data.error, Ext.emptyFn);
				return;
			}
			
			if ('results_count' in data) {
				that.results_count = data.results_count;
			}
			
			var resultsIn;
			if (that.displayMode == that.displayModes.SEARCH) {
				resultsIn = data.results;
			}
			else {
				var selectedCategory = 'ALL';
				if(that.browseCategory == 'food') {
					selectedCategory = 'FOOD';
				}
				else if(that.browseCategory == 'vehicle') {
					selectedCategory = 'VEHICLE';
				}
				else if(that.browseCategory == 'cps') {
					selectedCategory = 'CPS';
				}
				else if(that.browseCategory == 'health') {
					selectedCategory = 'HEALTH';
				}
				resultsIn = data.results[selectedCategory];
			}
			
			data.results = [];
			
			resultsIn.forEach(function(item, index, array) {
				var notificationStr, notificationIsOn = 0, retainItem, categIndex;
				
				for (categIndex = 0 ; categIndex < item.category.length ; categIndex++) {
					notificationStr = HCanAWR.itemCategoryMap.categoryNameFromId(item.category[categIndex])+'Notifications',
					notificationIsOn += 1*(HCanAWR.appSettings.getNotificationSetting(notificationStr) == true);
				}
				
				retainItem = (
					( that.displayMode == that.displayModes.RECENT && notificationIsOn )
						||
					( that.displayMode == that.displayModes.SEARCH )
				);
				
				if (retainItem) {
					data.results.push(that.processRecallItem(item));
				}
				
			});
			
			that.store.loadData(data.results);
			that.populateRecallList(false);
		};
		
		this.listResultsFailCallback = function(status) {
			window.console.error('Server returned status: ' + status);
			
			that.store.loadData([]);
			that.populateRecallList(false);
		};
		
		this.view = new HCanAWR.views.RecallBrowserView();
		this.view.init(this.store, function() {
			that.view.categories.mon(
				that.view.categories,
				'afterrender',
				function() {
					// Highlight the category after it has "really" rendered.
					setTimeout(function(){that.view.highlightCategory(that.browseCategory);}, 0);
					that.view.mon(
						that.view.el,
						{
							tap: that.viewHandlers.categoryImageTap,
							scope: that,
							delegate: '.categoryIconButton'
						}
					);
				},
				that,
				{ single: true }
			);
			
			Ext.each(['change', 'action'], function(eventName) {
				that.view.search.mon(
					that.view.search,
					eventName,
					that.viewHandlers.onSearchTextChanged,
					that,
					{ buffer: HCanAWR.conf.USERINPUTBUFFER }
				);
			}, that);
			
			if (!Ext.is.Android) {
				/* Hide the tab bar during search text typing. */
				that.view.search.mon(
					that.view.search,
					'focus',
					function() { HCanAWR.fireEvent('HideTabView'); },
					that
				);
				
				that.view.search.mon(
					that.view.search,
					'blur',
					function() { HCanAWR.fireEvent('ShowTabView'); },
					that
				);
				
				if (Ext.is.Blackberry) {
				
					var origOnMaskTap = that.view.categorySelect.onMaskTap;
					that.view.categorySelect.onMaskTap = function() {
					
						// blur search field to hide virtual keyboard
						that.view.search.blur();
						
						// delay showing picker to allow screen resizing
						Ext.defer(origOnMaskTap, 250, that.view.categorySelect);
						
					};
					
				}
				
			} else {
				/* On Android, launch our crazy search hack. */
				that.view.search.mon(
					that.view.search,
					'afterrender',
					function(cmp) {
						cmp.mon(
							cmp.el,
							'tap',
							that.viewHandlers.androidSearchTap,
							that
						);
					},
					that
				);
			}
			
			that.view.categorySelect.mon(
				that.view.categorySelect,
				'change',
				that.viewHandlers.categorySelect,
				that
			);
			
			that.view.results.mon(
				that.view.results,
				{
					itemtap: that.viewHandlers.recallItemTap,
					scope: that,
					delegate: '.x-list-item'
				}
			);
			
			that.view.messagePanel.mon(
				that.view.messagePanel,
				'afterrender',
				function() {
					that.view.messagePanel.mon(
						that.view.messagePanel.el,
						{
							tap: that.viewHandlers.messagePanelTap,
							scope: that,
							delegate: 'span'
						}
					)
				},
				that
			);
			
			that.view.loadMoreButton.mon(
				that.view.loadMoreButton,
				{
					tap: that.viewHandlers.loadMoreTap,
					scope: that
				}
			);
			
			callback(that.view);
		});
		
	},
	
	initRecallReadData: function() {
		var storedData = localStorage.getItem(HCanAWR.conf.RECALLREADKEY);
		
		if (storedData) {
			// If the local storage for read recalls becomes too big, simply erase it.
			if (storedData.length > HCanAWR.conf.RECALLREADSIZE) {
				localStorage.removeItem(HCanAWR.conf.RECALLREADKEY);
				storedData = {};
			}
			this.recallReadData = JSON.parse(storedData);
		} else {
			this.recallReadData = {};
			this.saveRecallReadData();
		}
	},
	
	setRecallRead: function(recallItem, read) {
		var isRead = (read === undefined) ? false : !!read,
			recordId = this.store.find('recallId', recallItem.recallId),
			record;
		
		if (recordId > -1) {
			if (( record = this.store.getAt(recordId) )) {
				record.set('isRead', isRead);
			}
		}
		
		this.recallReadData[recallItem.recallId] = isRead;
		this.saveRecallReadData();
		
		return isRead;
	},
	
	getRecallRead: function(recallItem) {
		if (this.recallReadData[recallItem.recallId] === undefined) {
			// isRead is based on age in this case.
			var past = new Date(Date.now()-HCanAWR.conf.RECALLREADAGE);
			
			if (recallItem.date_published < past) {
				return this.setRecallRead(recallItem, true);
			} else {
				return false;
			}
		} else {
			return this.recallReadData[recallItem.recallId];
		}
	},
	
	saveRecallReadData: function() {
		localStorage.setItem(HCanAWR.conf.RECALLREADKEY, JSON.stringify(this.recallReadData));
	},
	
	processRecallItem: function(item) {
		if (!(item.date_published instanceof Date)) {
			item.date_published = window.utils.dateFromTimeStamp( item.date_published );
		}
		item.isRead = (this.displayMode == this.displayModes.SEARCH) ? true : this.getRecallRead( item );
		item.category = (item.category.length > 1) ? HCanAWR.conf.MULTIPLECATEGORIES : HCanAWR.itemCategoryMap.categoryNameFromId(item.category[0]);
		item.date_readable = item.date_published.format(getStr('recallBrowser_DateFormat'));
		
		return item;
	},
	
	showRecentRecalls: function() {
		this.displayMode = this.displayModes.RECENT;
		this.browseCategory = HCanAWR.conf.ALLCATEGORIES;
		
		this.view.showRecentRecalls();
		
		this.doRecentRecalls();
		
		this.showView();
		this.view.highlightCategory(this.browseCategory, true);
		
	},
	
	showSearchRecalls: function() {
		this.displayMode = this.displayModes.SEARCH;
		
		this.clearRecallList();
		this.doSearchRecalls();
		
		this.view.showSearchRecalls();
		this.showView();
	},
	
	showView: function() {
		HCanAWR.fireEvent('ShowView', 'RecallBrowser');
	},
	
	doSearchRecalls: function() {
		this.searchData.off = 0;
		
		if (this.searchData.keywords.length < this.conf.MINKEYWORDLENGTH) {
			if (this.userEnteredSearch) {
				this.view.showSearchError( getStr('recallBrowser_SearchKeywordsTooShort').replace('%n', this.conf.MINKEYWORDLENGTH) );
			}
			return;
		}
		
		// Reset this now that we are about to search.
		this.userEnteredSearch = false;
		
		HCanAWR.services.runService(
			'search',
			// Search data stored in instance.
			this.searchData,
			// Success
			this.listResultsSuccessCallback,
			// Failure
			this.listResultsFailCallback
		);
		
	},
	
	doRecentRecalls: function() {
		HCanAWR.services.runService(
			'recent',
			{
				category: this.browseCategory,
				lang: HCanAWR.language
			},
			// Success
			this.listResultsSuccessCallback,
			// Failure
			this.listResultsFailCallback
		);
	},
	
	doSearchWithText: function(keywords) {
		this.userEnteredSearch = true;
		this.searchData.keywords = keywords;
		this.view.search.update(keywords);
		this.doSearchRecalls();
	},
	
	clearRecallList: function() {
		this.store.loadData([], false);
		this.populateRecallList(true);
	},
	
	populateRecallList: function(ignoreNoResults) {
		if (ignoreNoResults === undefined) {
			ignoreNoResults = false;
		}
		
		this.view.populateRecallList(this.store, ignoreNoResults);
		
		this.governLoadMoreButton();
	},
	
	governLoadMoreButton: function() {
		if (this.displayMode == this.displayModes.SEARCH
			&& this.results_count > this.store.getCount()) {
			this.view.showLoadMoreButton();
		} else {
			this.view.hideLoadMoreButton();
			
		}
	},
	
	onShowRecallDetail: function(recallShowRequest) {
		this.setRecallRead({ recallId: recallShowRequest.recallId }, true);
	},
	
	viewHandlers: {
		categoryImageTap: function(event, element, handler) {
			var tappedCategory  = element.id.replace('categoryImage$', ''),
				categoryIsEnabled = HCanAWR.appSettings.getNotificationSetting(tappedCategory+'Notifications');
			
			if (categoryIsEnabled) {
				this.view.highlightCategory(tappedCategory);
				
				if (tappedCategory == this.browseCategory) {
					this.browseCategory = HCanAWR.conf.ALLCATEGORIES;
				} else {
					this.browseCategory = tappedCategory;
				}
				
				this.doRecentRecalls();
			}
		},
		categorySelect: function(element, value, handler) {
			this.searchData.category = HCanAWR.itemCategoryMap.categoryIdFromName(value);
			this.userEnteredSearch = true;
			this.doSearchRecalls();
		},
		onSearchTextChanged: function(searchBox) {
			this.searchData.keywords = searchBox.fieldEl.dom.value;
			this.userEnteredSearch = true;
			this.doSearchRecalls();
		},
		androidSearchTap: function(e, item, o) {
			var keywords = '';
			
			if (this.androidSearchDone) {
				keywords = this.view.search.getEl().innerHTML;
			}
			window.plugins.HCanAWRPlugin.searchInput({keywords:keywords});
		},
		recallItemTap: function(list, index, item, event, handler) {
			var recallId = Ext.get(item).down('.recallBrowserResultId').dom.innerHTML;
			
			HCanAWR.fireEvent('ShowRecallDetail', {
				recallId: recallId,
				callingView: this.view.viewName
			});
			
		},
		messagePanelTap: function(event, element, handler) {
			HCanAWR.fireEvent('OpenURL', getStr('recallBrowser_SearchMessageLink'), Ext.emptyFn);
		},
		loadMoreTap: function(event, element, handler) {
			var that = this;
			this.searchData.off += this.searchData.lim;
			
			HCanAWR.services.runService(
				'search',
				// Search data stored in instance.
				this.searchData,
				// Success
				function(data) {
					if ('error' in data) {
						that.listResultsFailCallback(data);
						return;
					}
					data.results.forEach(function(item, index, arr){
						arr[index] = that.processRecallItem(item);
					});
					that.store.add(data.results);
					that.governLoadMoreButton();
					that.view.doLayout(); // Fix scroll breakage from adding new ents.
					that.view.scroller.scrollBy( { x:0, y:that.view.conf.ITEMAPPROXHEIGHT * -2.5 } );
				},
				// Failure
				function(status) {
					window.console.error('Server returned status: ' + status);
					that.governLoadMoreButton();
				}
			);
		},
	},
	
	destroy: function() {
		this.view.destroy();
	}
});

