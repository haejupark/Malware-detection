HCanAWR.controllers.RecallDetailController = Ext.extend(Ext.Controller, {
	conf: {
		DEFAULTSHAREURL: 'http://www.healthycanadians.gc.ca/',
		DEFAULTCALLINGVIEW: 'RecallBrowser',
		MAXHIST: 100, // 100 is a lot
	},
	
	init: function(callback) {
		var that = this;
		HCanAWR.mon(HCanAWR, 'ShowRecallDetail', this.showRecallDetail, this);
		
		this.recallData = {};
		this.recallIdHistory = [];
		this.imageList = [];
		this.callingView = this.conf.DEFAULTCALLINGVIEW;
		this.callingViewExternal = this.conf.DEFAULTCALLINGVIEW;
		
		this.view = new HCanAWR.views.RecallDetailView();
		this.view.init(function() {
			that.view.mon(
				that.view.backButton,
				'tap',
				that.viewHandlers.backButton,
				that
			);
			that.view.mon(
				that.view.doneButton,
				'tap',
				that.viewHandlers.doneButton,
				that
			);
			
			that.view.recallPanel.mon(
				that.view.recallPanel,
				'afterrender',
				function(cmp) {
					cmp.mon(
						cmp.el,
						{
							tap: that.viewHandlers.thumbnailImageTap,
							scope: that,
							delegate: '.recallDetailThumbnailImageContainer'
						}
					);
					
					cmp.mon(
						cmp,
						'afterlayout',
						function(cmp) {
							HCanAWR.fireEvent('ModifyExternalLinks', cmp, that.view.viewName);
						},
						that
					);
					
					var imgTags = cmp.el.dom.getElementsByTagName('img');
					
					for (var imgTagIndex = 0; imgTagIndex < imgTags.length ; imgTagIndex++) {
						imgTags[imgTagIndex].removeAttribute('height');
						imgTags[imgTagIndex].removeAttribute('width');
					}
				}
			);
			
			that.view.recallDetails.mon(
				that.view.recallDetails,
				'afterrender',
				function(cmp) {
					cmp.mon(
						cmp.el,
						{
							tap: that.viewHandlers.shareTap,
							scope: that,
							delegate: '.recallDetailShareContainer'
						}
					);
				}
			);
			
			callback(that.view);
		});
		
	},
	
	showRecallDetail: function(options) {
		var that = this,
			onSuccess = function(recallData) {
				if ('error' in recallData) {
					onFail(recallData.error);
					return;
				}
				
				that.recallData = recallData;
				that.recallData.panels.forEach(function(panel){
					if (panel.panelName == HCanAWR.conf.IMAGEPANELNAME) {
						that.imageList = panel.data;
						that.imageList.forEach(function(image) {
							image.fullUrl = HCanAWR.services.serviceBaseURL + image.fullUrl;
							image.thumbUrl = HCanAWR.services.serviceBaseURL + image.thumbUrl;
						});
						return false;
					}
				});
				
				that.view.populateView(recallData);
				that.view.scroller.scrollTo({x:0,y:0});
				
				HCanAWR.fireEvent('ShowView', 'RecallDetail');
			},
			onFail = function(error) {
				error = (typeof error == "string") ? error : getStr('connection_Error');
				HCanAWR.alert(
					getStr('app_Title'),
					error,
					Ext.emptyFn
				);
			};
		
		if ('callingView' in options) {
			if (options.callingView == this.view.viewName) {
				if (this.recallIdHistory.length > 0) {
					this.view.backButton.show();
				} else {
					this.view.backButton.hide();
				}
			} else {
				this.callingViewExternal = this.callingView;
				this.recallIdHistory = [];
				this.view.backButton.hide();
			}
			this.callingView = options.callingView;
		} else {
			this.callingView = this.conf.DEFAULTCALLINGVIEW;
			this.view.backButton.hide();
		}
		
		this.recallIdHistory.push(options.recallId);
		this.cleanHistory();
		
		// Fetch data for this recall.
		HCanAWR.services.runService(
			'detail',
			{
				id: options.recallId,
				lang: HCanAWR.language
			},
			onSuccess,
			onFail
		);
	},
	
	cleanHistory: function() {
		while (this.recallIdHistory.length > this.conf.MAXHIST) {
			this.recallIdHistory.shift();
		}
	},
	
	viewHandlers: {
		backButton: function() {
			/* We keep a history of who told us to show recall details.
			 * If it was ourselves, we rewind to the previous recall detail.
			 */
			if (this.callingView == this.view.viewName) {
				this.callingView = this.callingViewExternal;
				if (this.recallIdHistory.length >= 2) {
					this.recallIdHistory.pop(); // Discard current
					var idToShow = this.recallIdHistory.pop(); // Discard and use previous.
					HCanAWR.fireEvent('ShowRecallDetail', { recallId: idToShow, callingView: this.view.viewName });
				} else {
					HCanAWR.fireEvent('ShowView', this.callingViewExternal);
				}
			} else {
				HCanAWR.fireEvent('ShowView', this.callingViewExternal);
			}
		},
		doneButton: function() {
			this.callingView = this.callingViewExternal;
			HCanAWR.fireEvent('ShowView', this.callingViewExternal);
		},
		thumbnailImageTap: function(event, item, e) {
			var imageIndex = Ext.get(item).down('.recallDetailThumbnailImageId').dom.innerText;
			
			HCanAWR.fireEvent('ShowRecallImage', {
				imageList: this.imageList,
				index: imageIndex,
				callingView: this.view.viewName,
				doneView: this.callingView
			});
		},
		shareTap: function() {
			var messageSubject = getStr('recallDetail_shareSubjectText').replace('%title',this.recallData.title),
				messageBody = getStr('recallDetail_shareBodyText');
			
			if ('url' in this.recallData && this.recallData.url.length > "http://x".length) {
				messageBody = messageBody.replace('%url', this.recallData.url);
			} else {
				messageBody = messageBody.replace('%url', this.conf.DEFAULTSHAREURL);
			}
			
			HCanAWR.fireEvent('MailTo', messageSubject, messageBody);
		}
	},
	
	destroy: function() {
		this.view.destroy();
	}
});
