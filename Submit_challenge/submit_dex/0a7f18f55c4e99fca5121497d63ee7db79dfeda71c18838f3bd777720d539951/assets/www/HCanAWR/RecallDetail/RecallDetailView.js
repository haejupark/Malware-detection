HCanAWR.views.RecallDetailView = Ext.extend(Ext.Panel, {
	id: 'recallDetailView',
	viewName: 'RecallDetail',
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	scroll: true,
	recallDetailShown: false,
	
	itemsList:	['recallDetails', 'recallPanel', 'spacerPanel'],
	
	magicPanels: {
		images: function(panelData) {
			var numImages = panelData.data.length,
				panel,
				panelItems = [];
			
			Ext.each(panelData.data, function(imageItem, index) {
				imageItem.recallId = panelData.recallId;
				imageItem.imageId = index;
				
				panelItems.push( (new HCanAWR.views.RecallDetailThumbnailImageContainer()).init(imageItem) );
			}, this);
			
			panel = new HCanAWR.views.RecallDetailSection();
			panel.init({
				title: window.utils.ucfirst(panelData.panelName) + ' (' + numImages + ')',
				text: '',
				items: panelItems
			});
			
			return panel;
		}
	},
	
	init: function(callback) {
		this.topBar = new Ext.Toolbar({
			dock: 'top',
			cls: 'recallDetailToolbar',
			title: getStr('recallDetail_TopTitle'),
		});
		
		if (Ext.is.Blackberry) {
			this.topBar.add({xtype:'spacer'}, {xtype:'spacer'});
		}
		
		this.backButton = this.topBar.add({
			xtype: 'button',
			cls: 'recallDetailBackButton',
			text: getStr('recallDetail_BackButton')
		});
		
		this.topBar.add({xtype:'spacer'});
		
		this.doneButton = this.topBar.add({
			xtype: 'button',
			cls: 'recallDetailBackButton',
			text: getStr('recallDetail_DoneButton')
		});
		
		this.addDocked(this.topBar);
		
		this.recallDetailProperties = 'title start_date category'.split(' '); // Sync with the template below.
		var recallDetailsTpl = new Ext.XTemplate(
			'<div class="recallDetailCategory"><img src="images/advisory_cat_{category}_24px.png"></div>',
			'<div class="recallDetailShareContainer"><img src="images/share.png"></div>',
			'<div class="recallDetailTitle">{title}</div>',
			'<div class="recallDetailDate">{start_date}</div>'
		);
		
		this.recallDetails = new Ext.Container({
			cls: 'recallDetails',
			tpl: recallDetailsTpl
		});
		
		this.recallPanel = new Ext.Container({
			cls: 'recallDetailPanel',
		});
		
		this.spacerPanel = new Ext.Container({
			height: 30,
			cls: 'recallDetailSpacerPanel',
		});
		
		this.subPanel = new Ext.Container({
		});
		
		this.add(this.subPanel);
		Ext.each(this.itemsList, function(item) {
			this.subPanel.add(this[item]);
		}, this);
		
		callback();
	},
	
	populateView: function(recallData) {
		var that = this,
			panels = [],
			slimRecallData = {};
		
		this.recallDetailProperties.forEach(function(item){
			slimRecallData[item] = recallData[item];
		}, this);
		
		slimRecallData.category = (
			(slimRecallData.category.length > 1)
			? HCanAWR.conf.MULTIPLECATEGORIES
			: HCanAWR.itemCategoryMap.categoryNameFromId(slimRecallData.category[0])
		).toLowerCase();
		
		slimRecallData.start_date = window.utils.dateFromTimeStamp(slimRecallData.start_date).format(getStr('recallDetail_DateFormat'));
		
		if (this.recallDetailShown) {
			// Delete any panels that are already here.
			this.recallPanel.items.each(function(item) {
				item.destroy();
			});
		}
		
		if (this.recallDetails.rendered) {
			this.recallDetails.update(slimRecallData);
		} else {
			this.recallDetails.data = slimRecallData;
		}
		
		for ( var panelIndex = 0 ; panelIndex < recallData.panels.length ; panelIndex++ ) {
			var thisPanel = recallData.panels[panelIndex],
				panelData, panelSection;
			
			if (thisPanel.data === undefined) { // An ordinary panel.
				panelData = thisPanel;
				panelSection = (new HCanAWR.views.RecallDetailSection()).init(panelData);
			} else { // A "magic" panel.
				panelData = {
					recallId: recallData.id,
					data: thisPanel.data,
					panelName: thisPanel.panelName
				};
				
				panelSection = this.magicPanels[panelData.panelName].call(this, panelData);
			}
			
			panels.push(panelSection);
		}
		
		this.recallPanel.add(panels);
		this.recallPanel.doLayout();
		
		this.recallDetailShown = true;
	},
});


HCanAWR.views.RecallDetailSection = Ext.extend(Ext.Container, {
	cls: 'recallDetailSection',
	discloseButtonIcons: ['images/panel_expand.png','images/panel_collapse.png'],
	
	toggleSectionBody: function(event, button) {
		var newVis = !this.sectionBody.isVisible();
		
		this.sectionBody.doLayout();
		this.sectionBody.setVisible( newVis );
		
		this.discloseButton.setIcon( this.discloseButtonIcons[ (newVis)+0 ] );
		
		this.topContainer[(newVis?'add':'remove')+'Cls']('recallDetailSectionTopContainerDisclosed');
	},
	
	init: function(panelData) {
		var items = [
				{
					xtype: 'container',
					cls: 'recallDetailSectionTopContainer',
					items: [
						{
							xtype: 'container',
							cls: 'recallDetailSectionTitle',
							html: panelData.title,
							listeners: {
								tap: {
									element: 'el',
									fn: this.toggleSectionBody,
									scope: this,
								}
							}
						},{
							xtype: 'button',
							cls: 'recallDetailItemDiscloseButton',
							pressedCls: '',
							icon: this.discloseButtonIcons[0],
							listeners: {
								tap: {
									element: 'el',
									fn: this.toggleSectionBody,
									scope: this,
								}
							}
						}
					]
				},
				{
					xtype: 'container',
					cls: 'recallDetailSectionBody',
					hidden: true,
					html: panelData.text,
				}
			];
		
		this.add(items);
		
		this.topContainer = this.items.getAt(0);
		this.discloseButton = this.items.getAt(0).items.getAt(1);
		this.sectionBody = this.items.getAt(1);
		
		// If the 'items' property is set in input, add those things to the section body.
		if (panelData.items) {
			this.items.getAt(1).add(panelData.items);
		}
		
		return this; // important
	},
});

HCanAWR.views.RecallDetailThumbnailImageContainer = Ext.extend(Ext.Container, {
	cls: 'recallDetailThumbnailImageContainer',
	
	init: function(imageItem) {
		this.add({
			xtype: 'component',
			cls: 'recallDetailThumbnailImageId',
			html: imageItem.imageId+''
		},{
			xtype: 'component',
			cls: 'recallDetailThumbnailRecallId',
			html: imageItem.recallId
		},{
			xtype: 'component',
			html: '<img src="'+imageItem.thumbUrl+'">'
		});
		
		return this; // important
	},
});

