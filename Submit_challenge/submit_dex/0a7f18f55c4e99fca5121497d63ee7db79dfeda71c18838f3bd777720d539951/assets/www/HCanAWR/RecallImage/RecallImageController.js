HCanAWR.controllers.RecallImageController = Ext.extend(Ext.Controller, {
	viewName: 'RecallImage',
	
	init: function(callback) {
		var that = this;
		HCanAWR.mon(HCanAWR, 'ShowRecallImage', this.showRecallImage, this);
		HCanAWR.mon(HCanAWR, 'ShowView', this.onShowView, this);
		
		this.imageList = [];
		this.index = 0;
		this.callingView = null;
		this.doneView = null;
		this.viewShown = false;
		this.imageZoomed = false;
		
		this.view = new HCanAWR.views.RecallImageView();
		this.view.init(function() {
			/* Buttons */
			var handlerMap = {
				'#recallImageViewNavBackButton' : 'back',
				'#recallImageViewNavDoneButton' : 'done',
				'#recallImageViewNavLeftButton' : 'prevImage',
				'#recallImageViewNavRightButton' : 'nextImage',
			};
			for (var item in handlerMap) {
				if (!handlerMap.hasOwnProperty(item)) {
					continue;
				}
				that.view.mon(
					that.view.down(item),
					'tap',
					that.viewHandlers[handlerMap[item]],
					that
				);
			}
			
			/* Panel swipe */
			that.view.mon(
				that.view,
				'afterrender',
				function(cmp) {
					cmp.mon(
						cmp.el, 
						'swipe',
						that.viewHandlers.panelSwipe,
						that,
						{ buffer: HCanAWR.conf.SWIPEBUFFER } // Must discard rapid firing of swipe event.
					);
				},
				that,
				{ single: true } // Only assign swipe handler once
			);
			
			that.view.imageContainer.mon(
				that.view.imageContainer,
				'afterrender',
				function(cmp) {
					cmp.mon(
						cmp.el, 
						'tap',
						that.viewHandlers.imageTap,
						that
					);
				},
				that,
				{ single: true }
			);
			
			callback(that.view);
		});
		
	},
	
	showRecallImage: function(options) {
		if (options.callingView) {
			this.callingView = options.callingView;
		}
 		if (options.doneView) {
 			this.doneView = options.doneView;
 		}
		
		if (options.imageList) {
			this.imageList = options.imageList;
		}
		
		if (options.index === undefined) {
			window.console.error('HCanAWR.RecallImageController.showRecallImage: index was not properly specified.');
			options.index = 0;
		} else {
			options.index *= 1; // coerce to number
			
			if (options.index < 0) {
				options.index = this.imageList.length-1;
			} else if (options.index > this.imageList.length-1) {
				options.index = 0;
			}
		}
		
		this.index = options.index;
		this.imageZoomed = false;
		
		// We are ready to show the view
		if (!this.viewShown) {
			HCanAWR.fireEvent('ShowView', 'RecallImage');
		}
		
		this.view.showImage(this.imageList, this.index);
		
	},
	
	onShowView: function(viewName) {
		this.viewShown = (viewName == this.view.viewName);
	},
	
	viewHandlers: {
		back: function() {
			HCanAWR.fireEvent('ShowView', this.callingView);
		},
		done: function() {
			HCanAWR.fireEvent('ShowView', this.doneView);
		},
		prevImage: function() {
			this.showRecallImage({index: this.index-1});
		},
		nextImage: function() {
			this.showRecallImage({index: this.index+1});
		},
		panelSwipe: function(touchEvent, element, something) {
			if (this.imageZoomed) {
				return;
			}
			
			switch (touchEvent.direction) {
				case "left":
					this.viewHandlers.nextImage.call(this);
					break;
				case "right":
					this.viewHandlers.prevImage.call(this);
					break;
				// Nothing else will do.
			}
		},
		imageTap: function(touchEvent, element, something) {
			this.view.zoomImage(!this.imageZoomed);
			this.imageZoomed = !this.imageZoomed;
		},
	},
	
	destroy: function() {
		this.view.destroy();
	}
});

