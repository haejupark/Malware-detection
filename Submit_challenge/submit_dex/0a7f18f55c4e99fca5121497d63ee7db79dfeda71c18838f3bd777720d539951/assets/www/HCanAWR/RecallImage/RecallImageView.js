HCanAWR.views.RecallImageView = Ext.extend(Ext.Panel, {
	viewName: 'RecallImage',
	id: 'recallImageView',
	layout: 'fit',
	
	itemsWithData:	['imageContainer'],
	defaultData: { fullUrl: 'images/loading.gif', title: ' ' },
	
	init: function(callback) {
		var that = this;
		
		var backButton = new Ext.Button({
			cls: 'recallImageBackButton',
			text: getStr('recallImage_BackButton'),
			id: 'recallImageViewNavBackButton'
		});
		
		var doneButton = new Ext.Button({
			cls: 'recallImageDoneButton',
			text: getStr('recallImage_DoneButton'),
			id: 'recallImageViewNavDoneButton'
		});
		
		this.topToolbar = new Ext.Toolbar({
			dock: 'top',
			cls: 'recallImageToolbar'
		});
		
		if (Ext.is.Blackberry) {
			this.topToolbar.add(
				{xtype:'spacer'},
				{xtype:'spacer'}, 
				backButton,
				{xtype:'spacer'}, 
				doneButton
			);
		} else {
			this.topToolbar.add(
				backButton, 
				{xtype:'spacer'}, 
				doneButton
			);
		}
		
		this.bottomToolbar = new Ext.Toolbar({
			cls: 'recallImageViewBottomToolbar',
			dock: 'bottom',
			items: [
				{
					xtype: 'spacer',
				},
				{
					xtype: 'button',
					cls: 'recallImageButton recallImageButton_Left',
					icon: 'images/arrow-left.png',
					id: 'recallImageViewNavLeftButton'
				},
				{
					xtype: 'spacer',
				},
				{
					xtype: 'button',
					cls: 'recallImageButton recallImageButton_Right',
					icon: 'images/arrow-right.png',
					id: 'recallImageViewNavRightButton'
				},
				{
					xtype: 'spacer',
				}
			]
		});
		
		this.imageContainer = new Ext.Container({
			scroll: 'both',
			cls: 'recallImageViewImageContainer',
			tpl: '<div><img class="zoomedOut" id="recallImageViewImage" src="{fullUrl}" alt="{fullUrl}"><br><span class="recallImageViewImageTitle">{title}</span></div>',
			data: this.defaultData
		});
		
		this.addDocked(this.topToolbar);
		this.addDocked(this.bottomToolbar);
		this.add(this.imageContainer);
		
		callback();
	},
	
	showImage: function(list, index) {
		var topBarString = getStr('recallImage_TopTitle').replace('%x', index+1+'').replace('%n', list.length+''),
			listItem = list[index];
		
		this.topToolbar.setTitle(topBarString);
		
		this.itemsWithData.forEach(function(item) {
			item = this[item];
			
			if (item.rendered) {
				item.update(listItem);
			} else {
				item.data = listItem;
			}
		}, this);
		
		this.zoomImage(false);
	},
	
	zoomImage: function(imageZoom) {
		if (!this.imageContainer.rendered) {
			return;
		}
		
		if (imageZoom) {
			this.imageContainer.el.down('#recallImageViewImage').removeCls('zoomedOut');
		} else {
			this.imageContainer.el.down('#recallImageViewImage').addCls('zoomedOut');
		}
		
		this.resetImageScroll();
	},
	
	resetImageScroll: function() {
		if ('scroller' in this.imageContainer) {
			this.imageContainer.scroller.scrollTo({x:0,y:0});
		}
	}
	
});
