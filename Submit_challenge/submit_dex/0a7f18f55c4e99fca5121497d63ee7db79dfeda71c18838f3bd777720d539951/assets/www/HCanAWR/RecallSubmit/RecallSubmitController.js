HCanAWR.controllers.RecallSubmitController = Ext.extend(Ext.Controller, {
	
	init: function(callback) {
		var that = this;
		
		HCanAWR.mon(HCanAWR, 'ShowSubmitRecallsView', this.showSubmitRecalls, this);
		
		this.store = new Ext.data.Store({
			model: 'RecallSubmit'
		});
		
		this.view = new HCanAWR.views.RecallSubmitView();
		this.view.init(this.store, function() {
			that.view.submitList.mon(
				that.view.submitList,
				'afterrender',
				function(cmp) {
					cmp.mon(
						cmp,
						{
							itemTap: that.viewHandlers.submitRecallTap,
							scope: that
						}
					);
				},
				that,
				{ single: true }
			);
			
			callback(that.view);
		});
		
	},
	
	showSubmitRecalls: function() {
		var that = this
			processData = function(data) {
				that.store.loadData(data);
				that.view.populateView(that.store);
			},
			onSuccess = function(data) {
				if ('error' in data) {
					onFail(data.error);
					return;
				}
				processData(data);
			},
			onFail = function(error) {
				HCanAWR.alert(
					getStr('app_Title'),
					getStr('connection_Error'),
					function() {
						processData([]);
					}
				);
			};
		
		if (this.store.getCount() > 0) {
			HCanAWR.fireEvent('ShowView', 'RecallSubmit');
			return;
		}
		
		HCanAWR.services.runService(
			'submit',
			{ lang: HCanAWR.language },
			onSuccess,
			onFail
		);
		
		HCanAWR.fireEvent('ShowView', 'RecallSubmit');
	},
	
	viewHandlers: {
		submitRecallTap: function(list, index, item, event, handler) {
			var url = Ext.get(item).down('.recallSubmitURL').dom.innerHTML;
			
			HCanAWR.fireEvent('OpenURL', url, Ext.emptyFn);
		}
	},
	
	destroy: function() {
		this.view.destroy();
	}
});

