HCanAWRServices = function() {
	this.serviceBaseURL = "http://www.healthycanadians.gc.ca/",
	this.serviceDiscoveryURL = "recall-alert-rappel-avis/api/startup";
	this.serviceCallTimeout = 75*1000; // ms
	
	/* Flag set when in a usable state. */
	this.available = false;
	
	this.requestStarted = false;
	
	/* Service definitions to be fetched from startup service. */
	this.services = {};
	
	/* Last URL, for debugging. */
	this.lastURL = '';
	
	// Initiate service discovery.
	this.init = function(onSuccess, onFail) {
		var that = this;
		this.onSuccess = onSuccess;
		this.onFail = onFail;
		
		this.monitorServiceCall();
		Ext.Ajax.request({
			url: this.serviceBaseURL + this.serviceDiscoveryURL,
			success: function(response, opts) {
				that.stopMonitorServiceCall();
				that.services = Ext.decode(response.responseText).services;
				that.available = true;
				
				that.onSuccess();
			},
			failure: function(response, opts) {
				that.stopMonitorServiceCall();
				window.console.error('server-side failure with status code ' + response.status);
				that.onFail(response.status);
			}
		});
	};
	
	this.runService = function(serviceName, args, onSuccess, onFail) {
		var that = this,
			service = this.services[serviceName],
			serviceURL;
		this.onSuccess = onSuccess;
		this.onFail = onFail;
		
		if (!service) {
			throw new Error("Service named " + serviceName + " does not exist.");
		}
		
		if (!this.available) {
			throw new Error("WS call made when Services not available.");
		}
		
		HCanAWR.busy();
		
		// Added in a replace method call to fix the URL problem
		var temp = service.url;
		serviceURL = temp.replace('http://dev.healthycanadians.gc.ca/api/', 'http://dev.healthycanadians.gc.ca/recall-alert-rappel-avis/api/');
		// Below is the original line
		//serviceURL = service.url			;
		
		// Sub-in values for the URL with passed args.
		for (var param in service.params) {
			var argKey = service.params[param],
				argVal = args[service.params[param]],
				replaceVal = argVal;
			
			if ( replaceVal === undefined || replaceVal === null ) {
				replaceVal = (argKey == "lang") ? HCanAWR.language : '';
			}
			
			serviceURL = serviceURL.replace( "%"+argKey, encodeURI(replaceVal) );
		}
		
		/* Mailto kludge */
		if (serviceURL.indexOf('mailto:') == 0) {
			window.location = serviceURL;
			that.onSuccess({});
			HCanAWR.idle();
			return;
		}
		
		/* Normal HTTP requests */
		this.lastURL = serviceURL;
		
		this.monitorServiceCall();
		Ext.Ajax.request({
			// This line was added to get the reports to load correctly - temporary fix!!
			//url: 'http://dev.healthycanadians.gc.ca/recall-alert-rappel-avis/api/recent/en',
			// Below is the original line:
			url: serviceURL,
			method: service.method,
			success: function(response, opts) {
				that.stopMonitorServiceCall();
				
				var decodedResponse = null,
					callback = that.onSuccess;
				
				try {
					decodedResponse = Ext.decode( response.responseText );
				} catch(e) {
					window.console.error('Could not decode response: ' + e.message);
					
					decodedResponse = response.status; // Status code probably useless here.
					callback = that.onFail;
				} finally {
					callback( decodedResponse );
					HCanAWR.idle();
				}
			},
			failure: function(response, opts) {
				that.stopMonitorServiceCall();
				window.console.error('server-side failure with status code ' + response.status);
				that.onFail(response.status);
				HCanAWR.idle();
			}
		});
		
	};
	
	this.monitorServiceCall = function() {
		var that = this;
		this.requestStarted = true;
		this.serviceCallMon = setTimeout(
			function() {
				if ( that.requestStarted ) {
					that.requestStarted = false;
					
					that.onFail(-1);
					
					/* Blank off the callbacks so that if the AJAX calls ever return,
					 * they don't get called.
					 */
					that.onFail = Ext.emptyFn;
					that.onSuccess = Ext.emptyFn;
					
					HCanAWR.idle();
				}
			},
			this.serviceCallTimeout
		);
	};
	
	this.stopMonitorServiceCall = function() {
		clearTimeout(this.serviceCallMon);
		this.serviceCallMon = null;
		this.requestStarted = false;
	};
};
