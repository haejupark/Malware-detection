HCanAWR.controllers.TabController = Ext.extend(Ext.Controller, {
	view: null,
	
	viewsWithTab: {
		// Any views not specified here are false.
		Settings: true,
		RecallBrowser: true,
		RecallSubmit: true,
	},
	
	viewEventMap: {
		ShowRecentRecallsView: 'tabViewRecentItems',
		ShowSearchRecallsView: 'tabViewSearch',
		ShowSubmitRecallsView: 'tabViewReport',
		ShowSettingsView: 'tabViewSettings',
	},
	
	init: function(callback) {
		var that = this,
			createViewEventFn = function(viewEvent) {
				return function() {
					that.onViewEvent(viewEvent);
				};
			},
			assignHandlers = function() {
				// Tap handlers for buttons
				that.view.mon(
					that.view,
					'afterrender',
					function() {
						// Iterate through the toolbar buttons to assign handlers.
						that.view.items.each(
							function(item, index, length) {
								if (item.id.indexOf('tabView') == 0) {
									item.mon(item, 'tap', that.buttonTapHandlers[item.id], that);
								}
							},
							that
						);
					},
					that,
					{ single: true } // Only assign handlers once.
				);
				
				// Handlers to highlight selected tabs.
				for (var viewEvent in that.viewEventMap) {
					if (!that.viewEventMap.hasOwnProperty(viewEvent)) {
						continue;
					}
					
					HCanAWR.mon(HCanAWR, viewEvent, createViewEventFn(viewEvent), that);
				}
			};
		
		HCanAWR.mon(HCanAWR, 'ShowView', this.doTabView, this);
		HCanAWR.mon(HCanAWR, 'ShowTabView', this.showTabView, this);
		HCanAWR.mon(HCanAWR, 'HideTabView', this.hideTabView, this);
		
		this.view = new HCanAWR.views.TabView();
		this.view.init(function() {
			assignHandlers();
			
			that.view.render( Ext.getBody() );
			that.view.hide();
			
			callback(null);
		});
	},
	
	doTabView: function(viewName) {
		if (!!this.viewsWithTab[viewName]) {
			this.view.show();
		} else {
			this.view.hide();
		}
	},
	
	showTabView: function() {
		this.view.show();
	},
	
	hideTabView: function() {
		this.view.hide();
	},
	
	onViewEvent: function(viewEvent) {
		if (this.viewEventMap[viewEvent] === undefined) {
			return;
		}
		
		this.view.highlightButton(this.viewEventMap[viewEvent]);
	},
	
	buttonTapHandlers: {
		tabViewRecentItems: function(button, event) {
			HCanAWR.fireEvent('ShowRecentRecallsView');
		},
		tabViewSearch: function(button, event) {
			HCanAWR.fireEvent('ShowSearchRecallsView');
		},
		tabViewReport: function(button, event) {
			HCanAWR.fireEvent('ShowSubmitRecallsView');
		},
		tabViewSettings: function(button, event) {
			HCanAWR.fireEvent('ShowSettingsView');
		},
	},
	
	destroy: function() {
		this.view.destroy();
	}
	
});
