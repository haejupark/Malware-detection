
if (Ext.is.Blackberry) {

	// Fix BlackBerry OS 7 issue where
	// body is too wide and would result 
	// in horizontal scrolling (don't ask
	// me why setting height fixes width...)
	window.addEventListener(
		'load', 
		function(){
			document.body.style.height = (window.innerHeight+1) + 'px';
		},
		false
	);

	// Fix BlackBerry Phonegap half-screen bug by
	// overwriting Ext.Viewport.scrollToTop function 
	// to remove BlackBerry-sepcific code
	Ext.Viewport.scrollToTop = function() {
		if (Ext.is.iOS) {
			if (Ext.is.Phone) {
					document.body.scrollTop = document.body.scrollHeight;
			}
		}
		else {
			window.scrollTo(0, 1);
		}
	};
	
	// Make "pickers" show and hide from the top to
	// avoid interference and odd behaviour when 
	// the virtual keyboard is involved
	var origInitComponent = Ext.Picker.prototype.initComponent;
	Ext.Picker.prototype.initComponent = function() {
		Ext.createDelegate(origInitComponent, this)();
		
		this.exit = this.enter = "top";
		
		if (this.dockedItems && this.dockedItems.items.length) {
			this.dockedItems.get(0).dock = "bottom";
		}
		
	};

	// Fix BlackBerry OS 7 issue where tapping on 
	// text fields does not give focus
	Ext.gesture.Manager.onTouchEnd = function(e) {
		if (this.isFrozen) {
			return;
		}

		var gestures = this.currentGestures.slice(0),
				ln = gestures.length,
				i, gesture, endPoint,
				needsAnotherMove = false,
				touch = e.changedTouches ? e.changedTouches[0] : e;

		if (this.startPoint) {
			endPoint = Ext.util.Point.fromEvent(e);
			if (!(this.lastMovePoint || this.startPoint)['equals'](endPoint)) {
				needsAnotherMove = true;
			}
		}

		for (i = 0; i < ln; i++) {
			gesture = gestures[i];

			if (!e.stopped && gesture.listenForEnd) {
				// The point has changed, we should execute another onTouchMove before onTouchEnd
				// to deal with the problem of missing events on Androids and alike
				// This significantly improves scrolling experience on Androids!
				if (needsAnotherMove) {
					gesture.onTouchMove(e, touch);
				}

				gesture.onTouchEnd(e, touch);
			}

			this.stopGesture(gesture);
		}


		if (Ext.supports.Touch && this.isClick) {
			this.isClick = false;
			this.getEventSimulator().fire('click', this.startEvent.target, touch);
		}

		this.lastMovePoint = null;
		this.followTouches = [];
		this.startedChangedTouch = false;
		this.currentTargets = [];
		this.startEvent = null;
		this.startPoint = null;
	};

}